{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
	//     "description": "Log output to console"
	// }
	"Create implementation" : {
		"prefix" : "implement",
		"body" :[
			"#include \"$2.hpp\"",
			"",
			"//-----------------------   CONSTRUCTOR / DESTRUCTOR   -----------------------//",
			"",
			"$2::$2(void) {\t\t\t\t\t// constructeur par d√©faut",
			"\tstd::cout << \"$2 Default constructor called.\" << std::endl;",
			"\treturn; }",
			"",
			"$2::$2($2 const &copy) {\t\t\t\t\t// constructeur par copie",
			"\tstd::cout << \"$2 Copy constructor called.\" << std::endl;",
			"\treturn; }",
			"",
			"$2::$2(std::string name) {\t\t\t\t\t// constructeur by string",
			"\tstd::cout << \"$2 String constructor called.\" << std::endl;",
			"\treturn; }",
			"",	
			"$2::~$2(void) {\t\t\t\t\t// destructeur",
			"\tstd::cout << \"$2 Destructor called.\" << std::endl;",
			"\treturn; }",
			"",
			"//------------------------------   SURCHARGES   ------------------------------//",
			"",
			"$2\t\t&$2::operator=($2 const &rhs) {",
			"\tstd::cout << \"$2 Assignment operator called.\" << std::endl;",
			"\treturn(*this); }",
			"",
			"//---------------------------   SETTER / GETTER   ----------------------------//",
			"",
			"std::string const\t\t&$2::getName() const {",
			"\treturn(this->_name); }",
			"",
			"//---------------------------   MEMBER FUNCTIONS   ---------------------------//",
			"",
			"",
			"//-------------------------   NON MEMBER FUNCTIONS   -------------------------//",
			"",
			"std::ostream\t\t&operator<<(std::ostream &out, $2 const &rhs) {",
			"out << rhs.ATTENTION() << \"say something here\" << rhs.ATTENTION();",
			"\treturn(out); }",
			"",			
		],
		"description" : "create implementation prototype"
	}
}